;;; day1.el --- Solution for AOC 2023, day 1 -*- lexical-binding: t; -*-

(defun aoc-day1-main ()
  (interactive)
  (let* ((input-path (f-join (f-dirname buffer-file-name) "input_day1.txt"))
         (input-lines (butlast (s-lines (f-read-text input-path))))
         (sum 0))
    (dolist (line input-lines)
      (setq line (aoc-day1-parse-numbers (aoc-day1-parse-aglutinates line)))
      (setq sum (+ sum (aoc-day1-process-line line))))
    (message "Advent of Code 2023: The sum was %d" sum)))

(defun aoc-day1-process-line (line)
  (let* ((digits)
         (first-digit)
         (last-digit))
    (setq digits (seq-filter 'aoc-day1-number-p line))
    (setq first-digit (- (car digits) 48))
    (setq last-digit (- (car (last digits)) 48))
    (+ (* first-digit 10) last-digit)))

(defun aoc-day1-number-p (char)
  (let* ((number-section 48)
         (lower-bound (+ 0 number-section))
         (upper-bound (+ 9 number-section)))
    (and (<= char upper-bound) (>= char lower-bound))))

(defun aoc-day1-parse-aglutinates (line)
  (let* ((aglutinates '(("oneight" "oneeight")
                        ("twone" "twoone")
                        ("threeight" "threeeight")
                        ("fiveight" "fiveeight")
                        ("eightwo" "eighttwo")
                        ("eighthree" "eightthree")
                        ("nineight" "nineeight"))))
     (dolist (aglutinate aglutinates)
       (setq line
             (string-replace (car aglutinate)
                             (car (cdr aglutinate))
                             line)))
     line))

(defun aoc-day1-parse-numbers (line)
  (let* ((pattern "one\\|two\\|three\\|four\\|five\\|six\\|seven\\|eight\\|nine")
         (number nil)
         (start 0))
    (while (string-match pattern line start)
      (setq number (match-string 0 line))
      (setq line (aoc-day1-replace-number number line)))
    line))

(defun aoc-day1-replace-number (number line)
  (let* ((replaced-line))
    (cond ((string-equal number "one")
           (setq replaced-line (replace-match "1" nil nil line nil)))
          ((string-equal number "two")
           (setq replaced-line (replace-match "2" nil nil line nil)))
          ((string-equal number "three")
           (setq replaced-line (replace-match "3" nil nil line nil)))
          ((string-equal number "four")
           (setq replaced-line (replace-match "4" nil nil line nil)))
          ((string-equal number "five")
           (setq replaced-line (replace-match "5" nil nil line nil)))
          ((string-equal number "six")
           (setq replaced-line (replace-match "6" nil nil line nil)))
          ((string-equal number "seven")
           (setq replaced-line (replace-match "7" nil nil line nil)))
          ((string-equal number "eight")
           (setq replaced-line (replace-match "8" nil nil line nil)))
          ((string-equal number "nine")
           (setq replaced-line (replace-match "9" nil nil line nil)))
          (t (setq replaced-line line)))))
