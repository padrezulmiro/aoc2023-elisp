;;; day3.el --- Solution for AOC 2023, day 3 -*- lexical-binding: t; -*-

(cl-defstruct symbol-coords col row)

(defun aocd3-main ()
  (interactive)
  (let* ((input-path (f-join (f-dirname buffer-file-name) "input_day3.txt"))
         (input-lines (butlast (s-lines (f-read-text input-path))))
         (sum 0)
         (symbol-coords-list ())
         (parts-list ()))
    (setq symbol-coords-list (aocd3-find-symbols input-lines))
    (setq parts-list (aocd3-find-parts input-lines symbol-coords-list))
    (setq sum (aocd3-sum parts-list))
    (message "Advent of Code 2023: The sum was %d" sum)))

(defun aocd3-find-symbols (lines)
    (let* ((col 0) (symbols ()))
      (dolist (line lines)
        (dotimes (i (length line))
          (when (aocd3-symbol-p (aref line i))
            (push (make-symbol-coords :col col :row i) symbols)))
        (setq col (1+ col)))
      symbols))

(defun aocd3-symbol-p (symbol)
  (not (or (and (>= symbol ?0) (<= symbol ?9))
           (and (>= symbol ?a) (<= symbol ?z))
           (and (>= symbol ?A) (<= symbol ?Z))
           (char-equal symbol ?.))))

(defun aocd3-find-parts (lines symbols)
  (let* ((parts ())
         (col 0))
    (dolist (line lines)
      (setq parts (append parts (aocd3-find-line-parts line col symbols)))
      (setq col (1+ col)))
    parts))

(defun aocd3-find-line-parts (line col symbols)
  (let* ((number-pattern "[[:digit:]]+")
         (search-start 0)
         (begin)
         (end)
         (part)
         (parts))
    (while (string-match-p number-pattern line search-start)
      (setq begin (string-match number-pattern line search-start))
      (setq end (match-end 0))
      (setq search-start (match-end 0))
      (setq part (substring line begin end))

      (when (aocd3-part-p col begin (1- end) symbols)
        (push (string-to-number part) parts)))
    parts))

(defun aocd3-part-p (col left right symbols)
  (let* ((found-symbol nil)
         (i 0))
    (while (and (not found-symbol) (length> symbols i))
      (let* ((coords (nth i symbols)))
        (when (aocd3-adjacent-symbol-p col left right
                                       (symbol-coords-row coords)
                                       (symbol-coords-col coords))
          (setq found-symbol t)))
      (setq i (1+ i)))
    found-symbol))

(defun aocd3-adjacent-symbol-p (col left right symbol-row symbol-col)
  (or (and (= symbol-col (1+ col))
           (>= symbol-row (1- left))
           (<= symbol-row (1+ right)))
      (and (= symbol-col (1- col))
           (>= symbol-row (1- left))
           (<= symbol-row (1+ right)))
      (and (= symbol-col col)
           (or (= symbol-row (1- left))
               (= symbol-row (1+ right))))))

(defun aocd3-sum (l)
  (seq-reduce #'+ l 0))
