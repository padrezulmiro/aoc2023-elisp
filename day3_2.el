;;; day3_2.el --- Solution for AOC 2023, day 3, 2nd star -*- lexical-binding: t; -*-

(cl-defstruct star-coords col row)
(cl-defstruct number-coords col begin end number)

(defun aocd3-2-main ()
  (interactive)
  (let* ((input-path (f-join (f-dirname buffer-file-name) "input_day3.txt"))
         (input-lines (butlast (s-lines (f-read-text input-path))))
         (stars)
         (numbers)
         (gear-ratios)
         (sum 0))
    (setq stars (aocd3-2-find-stars input-lines))
    (setq numbers (aocd3-2-find-numbers input-lines))
    (setq gear-ratios (aocd3-2-list-gear-ratios stars numbers))
    (setq sum (seq-reduce #'+ gear-ratios 0))
    (message "Advent of Code 2023: The sum was %d" sum)))

(defun aocd3-2-find-stars (lines)
    (let* ((col 0) (stars ()))
      (dolist (line lines)
        (dotimes (i (length line))
          (when (char-equal (aref line i) ?*)
            (push (make-star-coords :col col :row i) stars)))
        (setq col (1+ col)))
      stars))

(defun aocd3-2-find-numbers (lines)
  (let* ((regex-pattern "[[:digit:]]+") (col 0) (numbers-found ())
         (search-start) (begin) (end))

    (dolist (line lines)
      (setq search-start 0)
      (while (string-match-p regex-pattern line search-start)
        (setq begin (string-match regex-pattern line search-start))
        (setq end (match-end 0))
        (setq part (substring line begin end))
        (setq search-start (match-end 0))
        (push (make-number-coords :col col :begin begin :end (1- end)
                             :number (string-to-number part))
         numbers-found))
      (setq col (1+ col)))
    numbers-found))

(defun aocd3-2-list-gear-ratios (stars numbers)
  (let* ((gear-ratios ())
         (adjacent))
    (dolist (star stars)
      (setq adjacent (aocd3-2-find-adjacent-numbers star numbers))
      (when (length= adjacent 2)
        (let* ((first-gear (number-coords-number (nth 0 adjacent)))
               (second-gear (number-coords-number (nth 1 adjacent))))
          (push (* first-gear second-gear) gear-ratios))))
    gear-ratios))

(defun aocd3-2-find-adjacent-numbers (star numbers)
  (let* ((adjacent ()))
    (dolist (number numbers)
      (when (aocd3-2-adjacent-p number star)
        (push number adjacent)))
    adjacent))

(defun aocd3-2-adjacent-p (number star)
  (let* ((number-col (number-coords-col number))
         (number-begin (number-coords-begin number))
         (number-end (number-coords-end number))
         (star-col (star-coords-col star))
         (star-row (star-coords-row star)))

    (or (and (or (= number-col (1+ star-col))
                 (= number-col (1- star-col)))
             (<= number-begin (1+ star-row))
             (>= number-end (1- star-row)))
        (and (= number-col star-col)
             (or (= number-end (1- star-row))
                 (= number-begin (1+ star-row)))))))
